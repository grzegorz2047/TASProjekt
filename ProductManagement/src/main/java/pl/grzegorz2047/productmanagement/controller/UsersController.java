package pl.grzegorz2047.productmanagement.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import pl.grzegorz2047.productmanagement.model.User;
import pl.grzegorz2047.productmanagement.repository.UserRepository;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;


@Controller    // This means that this class is a Controller
@RequestMapping(path = "/users") // This means URL's start with /users (after Application path)
public class UsersController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @GetMapping(path = "/add") // Map ONLY GET Requests
    public @ResponseBody
    String addNewUser(@RequestParam String name, @RequestParam String password, @RequestParam(defaultValue = "USER") String role) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        if (name.equals("grzegorz")) {
            throw new IllegalArgumentException("");
        }
        if (!role.equals("USER") && !role.equals("ADMIN")) {
            return "incorrect role";
        }
        String encodedPassword = passwordEncoder.encode(password);
        User n = new User(name, encodedPassword, new Date(), role);
        userRepository.save(n);
        return "Saved";
    }

    @PostMapping(path = "/login") // Map ONLY GET Requests
    public @ResponseBody
    Map<String, Object> loginUser(@RequestParam String login, @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        User user = userRepository.findByName(login);
        boolean matches = passwordEncoder.matches(password, user.getPassword());
        Map<String, Object> root = new HashMap<>();
        Map<String, Object> objects = new HashMap<>();
        objects.put("login", login);
        if (matches) {
            objects.put("matches", true);

        } else {
            objects.put("matches", false);
        }
        root.put("loginResult", objects);
        return root;

    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Map<String, Iterable> getAllUsers() {
        Map<String, Iterable> objects = new HashMap<>();
        objects.put("users", userRepository.findAll());
        return objects;
    }

    @GetMapping(path = "/exists")
    public @ResponseBody
    Map<String, Iterable> existsUser() {
        Map<String, Iterable> objects = new HashMap<>();
        objects.put("users", userRepository.findAll());
        return objects;
    }

    @ExceptionHandler({IllegalArgumentException.class})
    public void handleException() {
        System.out.println("ERROR");
    }
}