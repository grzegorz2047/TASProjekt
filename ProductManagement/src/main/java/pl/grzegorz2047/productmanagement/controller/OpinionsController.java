package pl.grzegorz2047.productmanagement.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import pl.grzegorz2047.productmanagement.model.*;
import pl.grzegorz2047.productmanagement.repository.*;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/opinions") // This means URL's start with /users (after Application path)
public class OpinionsController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private OpinionRepository opinionRepositiory;
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepositiory;

    @Autowired
    private ProductRepository productRepository;

    @GetMapping(path = "/add") // Map ONLY GET Requests
    public @ResponseBody
    String addNewOpinion(@RequestParam long userId, @RequestParam long productId, @RequestParam String opinionText, @RequestParam(defaultValue = "") String pros, @RequestParam(defaultValue = "") String cons, @RequestParam int score) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User oneUser = userRepositiory.findOne(userId);
        Product product = productRepository.findOne(productId);

        if (product != null) {
            ProductOpinion opinion = new ProductOpinion(oneUser, product, opinionText, new Date(), pros, cons, score);
            opinionRepositiory.save(opinion);
            product.setOpinionNumber(product.getOpinionNumber() + 1);
            product.setAverageScore(opinionRepositiory.getAvgForProduct(product.getId()));
            productRepository.save(product);
            return "Saved";
        } else {
            return "unknown error";
        }
    }


    @GetMapping(path = "/all", produces = "application/json; charset=utf-8")
    public @ResponseBody
    Map<String, Iterable> getAllOpinions() {
        Map<String, Iterable> objects = new HashMap<>();
        objects.put("opinions", opinionRepositiory.findAll());
        return objects;
    }

    @PostMapping(path = "/averageForProduct", produces = "application/json; charset=utf-8")
    public @ResponseBody
    Map<String, Double> getAvg(@RequestParam long productId) {
        Map<String, Double> objects = new HashMap<>();
        objects.put("opinions", opinionRepositiory.getAvgForProduct(productId));
        return objects;
    }

    /*@PostMapping(path = "/averageForAllProducts", produces = "application/json; charset=utf-8")
    public @ResponseBody
    Map<String, Iterable<ProductOpinion>> getAvg() {
        Map<String, Iterable<ProductOpinion>> objects = new HashMap<>();
        objects.put("opinions", opinionRepositiory.getAvgForAllProducts());
        return objects;
    }*/

    @PostMapping(path = "/sortedOpinions", produces = "application/json; charset=utf-8")
    public @ResponseBody
    Map<String, Iterable> getSortedOpinions(@RequestParam long productId, @RequestParam int limit, @RequestParam boolean sortById, @RequestParam boolean sortByName) {
        Map<String, Iterable> objects = new HashMap<>();
        if (sortById) {
            Sort sort = new Sort(new Sort.Order(Sort.Direction.ASC, "id"));
            objects.put("opinions", opinionRepositiory.opinionsForProduct(productId));
        }
        return objects;
    }
}